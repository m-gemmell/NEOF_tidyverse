---
title: "Arrange"
---

<center>
![](images/dplyr_arrange.png){style="width:200px"}
</center>

The `dplyr::arrange()` function allows you to arrange the rows of a __tibble__.

[Tidyverse reference page](https://dplyr.tidyverse.org//reference/arrange.html)

## Dataset

For demonstration we'll load and subset the `knz_bison` data from the [lterdatasampler package](/datasets/lterdatasampler.qmd) (hyperlink includes install instructions).

```{r}
#Load package
library("lterdatasampler")
#Subset of knz_bison tibble for demonstration
bison_tbl <- lterdatasampler::knz_bison |>
    #Convert to tibble
    tibble::as_tibble() |>
    #Slice to choose rows by index
    dplyr::slice(c(1,2,911,145,146,179,181,34,35)) |>
    #Select to choose columns based on column names
    dplyr::select(c(data_code,rec_year,animal_sex))
bison_tbl
```

## Numeric columns

Arrange the __tibble__ by rec_year:

```{r}
bison_tbl |> dplyr::arrange(rec_year)
```

`dplyr::arrange()` will arrange the rows by the selected column in ascending fashion (lowest to highest). You can use the `desc()` function on columns you wan't to be ordered in descending fashion.

Arrange the __tibble__ by rec_year in descending fashion:

```{r}
bison_tbl |> dplyr::arrange(desc(rec_year))
```

## String columns

Strings are order by alphabetical order.

Default is from A-Z (ascending).

```{r}
bison_tbl |> dplyr::arrange(animal_sex)
```

Set it to descending will order it from Z-A.

```{r}
bison_tbl |> dplyr::arrange(desc(animal_sex))
```

## Multiple columns

Multiple columns can be used to arrange a __tibble__.

The priority of ordering is based on the order of the columns, from high to low priority.

```{r}
bison_tbl |> dplyr::arrange(rec_year, animal_sex)
```