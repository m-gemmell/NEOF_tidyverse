{
  "hash": "648a260449055be18c302c9fef2e7324",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Adding rows and columns\"\nformat: html\n---\n\nData can be added to a __tibble__ by various methods. this includes:\n\n- Adding a new row or column with [`tibble::add_row()`](https://tibble.tidyverse.org/reference/add_row.html) and [`tibble::add_column()`](https://tibble.tidyverse.org/reference/add_column.html).\n- Binding rows or columns with [Dplyr](/dplyr/bind_tibbles)\n\n## Create example tibbles\n\nBefore demonstrating various examples we will create a few __tibbles__.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_tbl <- tibble::tibble(x = 1:3, y = 4:6, z = 7:9)\nnum_tbl_2 <- tibble::tibble(aa = 11:13, ab = 14:16, ac = 17:19)\nnum_tbl_3 <- tibble::tibble(x = 4:6, y = 7:9, z = 10:12)\nmixed_tbl <- tibble::tibble(number = 1:3, \n                            word = c(\"one\",\"two\",\"three\"), \n                            logical = c(TRUE,FALSE,TRUE))\n```\n:::\n\n\n\n## Adding one row or column\n\nAdding one new column or row can be carried out with the \n\nintuitively named functions:\n\n- [`tibble::add_row()`](https://tibble.tidyverse.org/reference/add_row.html): Add one or more rows to a __tibble__\n- [`tibble::add_column()`](https://tibble.tidyverse.org/reference/add_column.html): Add one or more columns to a __tibble__\n\n\n### Adding a column\n\nWe will add a column to the __tibble__ `num_tbl`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n      x     y     z\n  <int> <int> <int>\n1     1     4     7\n2     2     5     8\n3     3     6     9\n```\n\n\n:::\n:::\n\n\nTo add a new column you can provide `tibble::add_column()` with a vector that is the same length as the number of rows.\nIn the below example the new column will have the name __aa__.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_tbl_added_col <- tibble::add_column(num_tbl, aa = 10:12)\nnum_tbl_added_col\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n      x     y     z    aa\n  <int> <int> <int> <int>\n1     1     4     7    10\n2     2     5     8    11\n3     3     6     9    12\n```\n\n\n:::\n:::\n\n\n### Adding a row\n\nWe will add a row to the __tibble__ `mixed_tbl`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmixed_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  number word  logical\n   <int> <chr> <lgl>  \n1      1 one   TRUE   \n2      2 two   FALSE  \n3      3 three TRUE   \n```\n\n\n:::\n:::\n\n\nTo add a row you can use `tibble::add_row()`.\nEach column of the __tibble__ needs to be specified as an option with its added value.\nEach value must have the same class as the column it is being added to.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmixed_tbl_add_row <- tibble::add_row(mixed_tbl, \n                                    number = 4,  \n                                    word = \"four\",  \n                                    logical = FALSE)\nmixed_tbl_add_row\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  number word  logical\n   <dbl> <chr> <lgl>  \n1      1 one   TRUE   \n2      2 two   FALSE  \n3      3 three TRUE   \n4      4 four  FALSE  \n```\n\n\n:::\n:::\n\n\n\n## Binding a tibble to a tibble\n\n__Tibbles__ can be bound together to create a new __tibble__ with `dplyr::bind_cols()` and `dplyr::bind_rows()`.\n\nBelow are 2 quick examples with more details in the [Dplyr bind tibbles page](/dplyr/bind_tibbles)\n\n\n### Bind by columns\n\nBind 2 or more __tibbles__ by columns.\nIn other words you will end up with more columns and the same amount of rows.\n\nWe will bind the two following __tibbles__ by columns.\n\n__Note__ that the two __tibbles__ must have the same amount of rows.\nAdditionally, they should have completely unique column names compared to each other.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n      x     y     z\n  <int> <int> <int>\n1     1     4     7\n2     2     5     8\n3     3     6     9\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_tbl_2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n     aa    ab    ac\n  <int> <int> <int>\n1    11    14    17\n2    12    15    18\n3    13    16    19\n```\n\n\n:::\n:::\n\n\nColumn bind\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_tbl_col_bound <- dplyr::bind_cols(num_tbl, num_tbl_2)\nnum_tbl_col_bound\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n      x     y     z    aa    ab    ac\n  <int> <int> <int> <int> <int> <int>\n1     1     4     7    11    14    17\n2     2     5     8    12    15    18\n3     3     6     9    13    16    19\n```\n\n\n:::\n:::\n\n\n### Bind by rows\n\nBind 2 or more __tibbles__ by rows with `dplyr::bind_rows()`.\nIn other words you will end up with more rows and the same amount of columns.\n\nWe will bind the two following __tibbles__ by rows.\n\n__Note__ that the two __tibbles__ must have the same amount of columns.\nAdditionally, they should have the same column names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n      x     y     z\n  <int> <int> <int>\n1     1     4     7\n2     2     5     8\n3     3     6     9\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_tbl_3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n      x     y     z\n  <int> <int> <int>\n1     4     7    10\n2     5     8    11\n3     6     9    12\n```\n\n\n:::\n:::\n\n\nRow bind\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_tbl_row_bound <- dplyr::bind_rows(num_tbl, num_tbl_3)\nnum_tbl_row_bound\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n      x     y     z\n  <int> <int> <int>\n1     1     4     7\n2     2     5     8\n3     3     6     9\n4     4     7    10\n5     5     8    11\n6     6     9    12\n```\n\n\n:::\n:::\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}